// Mocks generated by Mockito 5.4.6 from annotations
// in hymnes_sda_fr/test/unit/services/posthog_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:posthog_flutter/src/posthog.dart' as _i2;
import 'package:posthog_flutter/src/posthog_config.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Posthog].
///
/// See the documentation for Mockito's code generation for more information.
class MockPosthog extends _i1.Mock implements _i2.Posthog {
  MockPosthog() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> setup(_i4.PostHogConfig? config) => (super.noSuchMethod(
        Invocation.method(
          #setup,
          [config],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> identify({
    required String? userId,
    Map<String, Object>? userProperties,
    Map<String, Object>? userPropertiesSetOnce,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #identify,
          [],
          {
            #userId: userId,
            #userProperties: userProperties,
            #userPropertiesSetOnce: userPropertiesSetOnce,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> capture({
    required String? eventName,
    Map<String, Object>? properties,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #capture,
          [],
          {
            #eventName: eventName,
            #properties: properties,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> screen({
    required String? screenName,
    Map<String, Object>? properties,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #screen,
          [],
          {
            #screenName: screenName,
            #properties: properties,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> alias({required String? alias}) => (super.noSuchMethod(
        Invocation.method(
          #alias,
          [],
          {#alias: alias},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String> getDistinctId() => (super.noSuchMethod(
        Invocation.method(
          #getDistinctId,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getDistinctId,
            [],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> reset() => (super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> disable() => (super.noSuchMethod(
        Invocation.method(
          #disable,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> enable() => (super.noSuchMethod(
        Invocation.method(
          #enable,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isOptOut() => (super.noSuchMethod(
        Invocation.method(
          #isOptOut,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> debug(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #debug,
          [enabled],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> register(
    String? key,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> unregister(String? key) => (super.noSuchMethod(
        Invocation.method(
          #unregister,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isFeatureEnabled(String? key) => (super.noSuchMethod(
        Invocation.method(
          #isFeatureEnabled,
          [key],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> reloadFeatureFlags() => (super.noSuchMethod(
        Invocation.method(
          #reloadFeatureFlags,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> group({
    required String? groupType,
    required String? groupKey,
    Map<String, Object>? groupProperties,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #group,
          [],
          {
            #groupType: groupType,
            #groupKey: groupKey,
            #groupProperties: groupProperties,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Object?> getFeatureFlag(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getFeatureFlag,
          [key],
        ),
        returnValue: _i3.Future<Object?>.value(),
      ) as _i3.Future<Object?>);

  @override
  _i3.Future<Object?> getFeatureFlagPayload(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getFeatureFlagPayload,
          [key],
        ),
        returnValue: _i3.Future<Object?>.value(),
      ) as _i3.Future<Object?>);

  @override
  _i3.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> getSessionId() => (super.noSuchMethod(
        Invocation.method(
          #getSessionId,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
}
