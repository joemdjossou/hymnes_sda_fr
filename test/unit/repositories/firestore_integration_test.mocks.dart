// Mocks generated by Mockito 5.4.5 from annotations
// in hymnes_sda_fr/test/unit/repositories/firestore_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:hymnes_sda_fr/core/models/hymn.dart' as _i4;
import 'package:hymnes_sda_fr/core/repositories/firestore_favorites_repository.dart'
    as _i6;
import 'package:hymnes_sda_fr/core/repositories/i_hymn_repository.dart' as _i7;
import 'package:hymnes_sda_fr/core/services/storage_service.dart' as _i2;
import 'package:hymnes_sda_fr/features/favorites/models/favorite_hymn.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i2.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> addToFavorites(_i4.Hymn? hymn) => (super.noSuchMethod(
        Invocation.method(
          #addToFavorites,
          [hymn],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeFromFavorites(String? hymnNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromFavorites,
          [hymnNumber],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  bool isFavorite(String? hymnNumber) => (super.noSuchMethod(
        Invocation.method(
          #isFavorite,
          [hymnNumber],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<List<_i5.FavoriteHymn>> getFavorites() => (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [],
        ),
        returnValue:
            _i3.Future<List<_i5.FavoriteHymn>>.value(<_i5.FavoriteHymn>[]),
      ) as _i3.Future<List<_i5.FavoriteHymn>>);

  @override
  _i3.Future<List<_i4.Hymn>> getFavoritesAsHymns() => (super.noSuchMethod(
        Invocation.method(
          #getFavoritesAsHymns,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Hymn>>.value(<_i4.Hymn>[]),
      ) as _i3.Future<List<_i4.Hymn>>);

  @override
  _i3.Future<void> addToRecentlyPlayed(_i4.Hymn? hymn) => (super.noSuchMethod(
        Invocation.method(
          #addToRecentlyPlayed,
          [hymn],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Hymn>> getRecentlyPlayed() => (super.noSuchMethod(
        Invocation.method(
          #getRecentlyPlayed,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Hymn>>.value(<_i4.Hymn>[]),
      ) as _i3.Future<List<_i4.Hymn>>);

  @override
  _i3.Future<void> saveSetting(
    String? key,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSetting,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  T? getSetting<T>(
    String? key, {
    T? defaultValue,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getSetting,
        [key],
        {#defaultValue: defaultValue},
      )) as T?);

  @override
  _i3.Future<void> removeSetting(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeSetting,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> migrateFromSharedPreferences() => (super.noSuchMethod(
        Invocation.method(
          #migrateFromSharedPreferences,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>> exportData() => (super.noSuchMethod(
        Invocation.method(
          #exportData,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> importData(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #importData,
          [data],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FirestoreFavoritesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreFavoritesRepository extends _i1.Mock
    implements _i6.FirestoreFavoritesRepository {
  MockFirestoreFavoritesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  _i3.Stream<List<_i5.FavoriteHymn>> get favoritesStream => (super.noSuchMethod(
        Invocation.getter(#favoritesStream),
        returnValue: _i3.Stream<List<_i5.FavoriteHymn>>.empty(),
      ) as _i3.Stream<List<_i5.FavoriteHymn>>);

  @override
  _i3.Future<List<_i5.FavoriteHymn>> getFavorites() => (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [],
        ),
        returnValue:
            _i3.Future<List<_i5.FavoriteHymn>>.value(<_i5.FavoriteHymn>[]),
      ) as _i3.Future<List<_i5.FavoriteHymn>>);

  @override
  _i3.Future<List<_i4.Hymn>> getFavoritesAsHymns() => (super.noSuchMethod(
        Invocation.method(
          #getFavoritesAsHymns,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Hymn>>.value(<_i4.Hymn>[]),
      ) as _i3.Future<List<_i4.Hymn>>);

  @override
  _i3.Future<void> addToFavorites(_i4.Hymn? hymn) => (super.noSuchMethod(
        Invocation.method(
          #addToFavorites,
          [hymn],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeFromFavorites(String? hymnNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromFavorites,
          [hymnNumber],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  bool isFavorite(String? hymnNumber) => (super.noSuchMethod(
        Invocation.method(
          #isFavorite,
          [hymnNumber],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<bool> isFavoriteAsync(String? hymnNumber) => (super.noSuchMethod(
        Invocation.method(
          #isFavoriteAsync,
          [hymnNumber],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> syncToLocal(_i7.IFavoriteRepository? localRepository) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncToLocal,
          [localRepository],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> syncFromLocal(_i7.IFavoriteRepository? localRepository) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncFromLocal,
          [localRepository],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> getFavoritesCount() => (super.noSuchMethod(
        Invocation.method(
          #getFavoritesCount,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<void> clearAllFavorites() => (super.noSuchMethod(
        Invocation.method(
          #clearAllFavorites,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
