// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/objectbox_entities.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3138469560795967876),
    name: 'FavoriteHymnEntity',
    lastPropertyId: const obx_int.IdUid(18, 833517039455295431),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4830849972970748531),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6799408939935750000),
        name: 'hymnNumber',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(1, 3359818646190551248),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3709092947370818946),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3637820532607630645),
        name: 'lyrics',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6429999002671972188),
        name: 'author',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8558720240121497712),
        name: 'composer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2363037763383000622),
        name: 'style',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8608103576532949537),
        name: 'sopranoFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3813140579152356171),
        name: 'altoFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 7904025338569631729),
        name: 'tenorFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8089453253371029949),
        name: 'bassFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 5643120116868685200),
        name: 'countertenorFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4245146943177720731),
        name: 'baritoneFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 7570118152896970808),
        name: 'midiFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6489735746906872712),
        name: 'theme',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 5887241026793733896),
        name: 'subtheme',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 2801799765141502539),
        name: 'story',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 833517039455295431),
        name: 'dateAdded',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 1831285798643428989),
    name: 'HymnEntity',
    lastPropertyId: const obx_int.IdUid(17, 3550209943813547724),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3379797592360713458),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 155589985757630984),
        name: 'number',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(2, 6476402080306534532),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4352337269411108716),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4660031001638794902),
        name: 'lyrics',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 511659171110154134),
        name: 'author',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2804246326545373250),
        name: 'composer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1512667199575234447),
        name: 'style',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8596848487740770866),
        name: 'sopranoFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7316202327705963419),
        name: 'altoFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3004711501831213),
        name: 'tenorFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 3381354590135344133),
        name: 'bassFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 9150314048986756822),
        name: 'countertenorFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 5007055314196776124),
        name: 'baritoneFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 7670589772095532616),
        name: 'midiFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 5497592787618639502),
        name: 'theme',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 738226283698344490),
        name: 'subtheme',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 3550209943813547724),
        name: 'story',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 4410930828110042339),
    name: 'RecentlyPlayedEntity',
    lastPropertyId: const obx_int.IdUid(18, 6681588041005250049),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3498767027094937354),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8640884925793582087),
        name: 'hymnNumber',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(3, 1796979487675812113),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5940865420129350244),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1813704064045718087),
        name: 'lyrics',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3566042917966708118),
        name: 'author',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 864365166371747366),
        name: 'composer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1431382173048530962),
        name: 'style',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5764711112483702356),
        name: 'sopranoFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 133894045927322165),
        name: 'altoFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3536681949736305487),
        name: 'tenorFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 6877621850229195096),
        name: 'bassFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 979111854962764088),
        name: 'countertenorFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 8913599037741181421),
        name: 'baritoneFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2688003343065801264),
        name: 'midiFile',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 5967986592932381002),
        name: 'theme',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 7236148919665772721),
        name: 'subtheme',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 672623933210139823),
        name: 'story',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 6681588041005250049),
        name: 'lastPlayed',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 3552587047468815287),
    name: 'SettingEntity',
    lastPropertyId: const obx_int.IdUid(3, 1600972510508026027),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4482717388862095537),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5348269625986260406),
        name: 'key',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(4, 4379606399076280359),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1600972510508026027),
        name: 'value',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 3552587047468815287),
    lastIndexId: const obx_int.IdUid(4, 4379606399076280359),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    FavoriteHymnEntity: obx_int.EntityDefinition<FavoriteHymnEntity>(
      model: _entities[0],
      toOneRelations: (FavoriteHymnEntity object) => [],
      toManyRelations: (FavoriteHymnEntity object) => {},
      getId: (FavoriteHymnEntity object) => object.id,
      setId: (FavoriteHymnEntity object, int id) {
        object.id = id;
      },
      objectToFB: (FavoriteHymnEntity object, fb.Builder fbb) {
        final hymnNumberOffset = fbb.writeString(object.hymnNumber);
        final titleOffset = fbb.writeString(object.title);
        final lyricsOffset = fbb.writeString(object.lyrics);
        final authorOffset = fbb.writeString(object.author);
        final composerOffset = fbb.writeString(object.composer);
        final styleOffset = fbb.writeString(object.style);
        final sopranoFileOffset = fbb.writeString(object.sopranoFile);
        final altoFileOffset = fbb.writeString(object.altoFile);
        final tenorFileOffset = fbb.writeString(object.tenorFile);
        final bassFileOffset = fbb.writeString(object.bassFile);
        final countertenorFileOffset = object.countertenorFile == null
            ? null
            : fbb.writeString(object.countertenorFile!);
        final baritoneFileOffset = object.baritoneFile == null
            ? null
            : fbb.writeString(object.baritoneFile!);
        final midiFileOffset = fbb.writeString(object.midiFile);
        final themeOffset = fbb.writeString(object.theme);
        final subthemeOffset = fbb.writeString(object.subtheme);
        final storyOffset = fbb.writeString(object.story);
        fbb.startTable(19);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, hymnNumberOffset);
        fbb.addOffset(2, titleOffset);
        fbb.addOffset(3, lyricsOffset);
        fbb.addOffset(4, authorOffset);
        fbb.addOffset(5, composerOffset);
        fbb.addOffset(6, styleOffset);
        fbb.addOffset(7, sopranoFileOffset);
        fbb.addOffset(8, altoFileOffset);
        fbb.addOffset(9, tenorFileOffset);
        fbb.addOffset(10, bassFileOffset);
        fbb.addOffset(11, countertenorFileOffset);
        fbb.addOffset(12, baritoneFileOffset);
        fbb.addOffset(13, midiFileOffset);
        fbb.addOffset(14, themeOffset);
        fbb.addOffset(15, subthemeOffset);
        fbb.addOffset(16, storyOffset);
        fbb.addInt64(17, object.dateAdded.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final hymnNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final lyricsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final authorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final composerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final styleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final sopranoFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final altoFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final tenorFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final bassFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final countertenorFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final baritoneFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final midiFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final themeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 32, '');
        final subthemeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final storyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 36, '');
        final dateAddedParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0),
        );
        final object = FavoriteHymnEntity(
          id: idParam,
          hymnNumber: hymnNumberParam,
          title: titleParam,
          lyrics: lyricsParam,
          author: authorParam,
          composer: composerParam,
          style: styleParam,
          sopranoFile: sopranoFileParam,
          altoFile: altoFileParam,
          tenorFile: tenorFileParam,
          bassFile: bassFileParam,
          countertenorFile: countertenorFileParam,
          baritoneFile: baritoneFileParam,
          midiFile: midiFileParam,
          theme: themeParam,
          subtheme: subthemeParam,
          story: storyParam,
          dateAdded: dateAddedParam,
        );

        return object;
      },
    ),
    HymnEntity: obx_int.EntityDefinition<HymnEntity>(
      model: _entities[1],
      toOneRelations: (HymnEntity object) => [],
      toManyRelations: (HymnEntity object) => {},
      getId: (HymnEntity object) => object.id,
      setId: (HymnEntity object, int id) {
        object.id = id;
      },
      objectToFB: (HymnEntity object, fb.Builder fbb) {
        final numberOffset = fbb.writeString(object.number);
        final titleOffset = fbb.writeString(object.title);
        final lyricsOffset = fbb.writeString(object.lyrics);
        final authorOffset = fbb.writeString(object.author);
        final composerOffset = fbb.writeString(object.composer);
        final styleOffset = fbb.writeString(object.style);
        final sopranoFileOffset = fbb.writeString(object.sopranoFile);
        final altoFileOffset = fbb.writeString(object.altoFile);
        final tenorFileOffset = fbb.writeString(object.tenorFile);
        final bassFileOffset = fbb.writeString(object.bassFile);
        final countertenorFileOffset = object.countertenorFile == null
            ? null
            : fbb.writeString(object.countertenorFile!);
        final baritoneFileOffset = object.baritoneFile == null
            ? null
            : fbb.writeString(object.baritoneFile!);
        final midiFileOffset = fbb.writeString(object.midiFile);
        final themeOffset = fbb.writeString(object.theme);
        final subthemeOffset = fbb.writeString(object.subtheme);
        final storyOffset = fbb.writeString(object.story);
        fbb.startTable(18);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, numberOffset);
        fbb.addOffset(2, titleOffset);
        fbb.addOffset(3, lyricsOffset);
        fbb.addOffset(4, authorOffset);
        fbb.addOffset(5, composerOffset);
        fbb.addOffset(6, styleOffset);
        fbb.addOffset(7, sopranoFileOffset);
        fbb.addOffset(8, altoFileOffset);
        fbb.addOffset(9, tenorFileOffset);
        fbb.addOffset(10, bassFileOffset);
        fbb.addOffset(11, countertenorFileOffset);
        fbb.addOffset(12, baritoneFileOffset);
        fbb.addOffset(13, midiFileOffset);
        fbb.addOffset(14, themeOffset);
        fbb.addOffset(15, subthemeOffset);
        fbb.addOffset(16, storyOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final numberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final lyricsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final authorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final composerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final styleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final sopranoFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final altoFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final tenorFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final bassFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final countertenorFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final baritoneFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final midiFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final themeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 32, '');
        final subthemeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final storyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 36, '');
        final object = HymnEntity(
          id: idParam,
          number: numberParam,
          title: titleParam,
          lyrics: lyricsParam,
          author: authorParam,
          composer: composerParam,
          style: styleParam,
          sopranoFile: sopranoFileParam,
          altoFile: altoFileParam,
          tenorFile: tenorFileParam,
          bassFile: bassFileParam,
          countertenorFile: countertenorFileParam,
          baritoneFile: baritoneFileParam,
          midiFile: midiFileParam,
          theme: themeParam,
          subtheme: subthemeParam,
          story: storyParam,
        );

        return object;
      },
    ),
    RecentlyPlayedEntity: obx_int.EntityDefinition<RecentlyPlayedEntity>(
      model: _entities[2],
      toOneRelations: (RecentlyPlayedEntity object) => [],
      toManyRelations: (RecentlyPlayedEntity object) => {},
      getId: (RecentlyPlayedEntity object) => object.id,
      setId: (RecentlyPlayedEntity object, int id) {
        object.id = id;
      },
      objectToFB: (RecentlyPlayedEntity object, fb.Builder fbb) {
        final hymnNumberOffset = fbb.writeString(object.hymnNumber);
        final titleOffset = fbb.writeString(object.title);
        final lyricsOffset = fbb.writeString(object.lyrics);
        final authorOffset = fbb.writeString(object.author);
        final composerOffset = fbb.writeString(object.composer);
        final styleOffset = fbb.writeString(object.style);
        final sopranoFileOffset = fbb.writeString(object.sopranoFile);
        final altoFileOffset = fbb.writeString(object.altoFile);
        final tenorFileOffset = fbb.writeString(object.tenorFile);
        final bassFileOffset = fbb.writeString(object.bassFile);
        final countertenorFileOffset = object.countertenorFile == null
            ? null
            : fbb.writeString(object.countertenorFile!);
        final baritoneFileOffset = object.baritoneFile == null
            ? null
            : fbb.writeString(object.baritoneFile!);
        final midiFileOffset = fbb.writeString(object.midiFile);
        final themeOffset = fbb.writeString(object.theme);
        final subthemeOffset = fbb.writeString(object.subtheme);
        final storyOffset = fbb.writeString(object.story);
        fbb.startTable(19);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, hymnNumberOffset);
        fbb.addOffset(2, titleOffset);
        fbb.addOffset(3, lyricsOffset);
        fbb.addOffset(4, authorOffset);
        fbb.addOffset(5, composerOffset);
        fbb.addOffset(6, styleOffset);
        fbb.addOffset(7, sopranoFileOffset);
        fbb.addOffset(8, altoFileOffset);
        fbb.addOffset(9, tenorFileOffset);
        fbb.addOffset(10, bassFileOffset);
        fbb.addOffset(11, countertenorFileOffset);
        fbb.addOffset(12, baritoneFileOffset);
        fbb.addOffset(13, midiFileOffset);
        fbb.addOffset(14, themeOffset);
        fbb.addOffset(15, subthemeOffset);
        fbb.addOffset(16, storyOffset);
        fbb.addInt64(17, object.lastPlayed.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final hymnNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final lyricsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final authorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final composerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final styleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final sopranoFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final altoFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final tenorFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final bassFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final countertenorFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final baritoneFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final midiFileParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final themeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 32, '');
        final subthemeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final storyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 36, '');
        final lastPlayedParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0),
        );
        final object = RecentlyPlayedEntity(
          id: idParam,
          hymnNumber: hymnNumberParam,
          title: titleParam,
          lyrics: lyricsParam,
          author: authorParam,
          composer: composerParam,
          style: styleParam,
          sopranoFile: sopranoFileParam,
          altoFile: altoFileParam,
          tenorFile: tenorFileParam,
          bassFile: bassFileParam,
          countertenorFile: countertenorFileParam,
          baritoneFile: baritoneFileParam,
          midiFile: midiFileParam,
          theme: themeParam,
          subtheme: subthemeParam,
          story: storyParam,
          lastPlayed: lastPlayedParam,
        );

        return object;
      },
    ),
    SettingEntity: obx_int.EntityDefinition<SettingEntity>(
      model: _entities[3],
      toOneRelations: (SettingEntity object) => [],
      toManyRelations: (SettingEntity object) => {},
      getId: (SettingEntity object) => object.id,
      setId: (SettingEntity object, int id) {
        object.id = id;
      },
      objectToFB: (SettingEntity object, fb.Builder fbb) {
        final keyOffset = fbb.writeString(object.key);
        final valueOffset = fbb.writeString(object.value);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, keyOffset);
        fbb.addOffset(2, valueOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final keyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final valueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final object = SettingEntity(
          id: idParam,
          key: keyParam,
          value: valueParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [FavoriteHymnEntity] entity fields to define ObjectBox queries.
class FavoriteHymnEntity_ {
  /// See [FavoriteHymnEntity.id].
  static final id = obx.QueryIntegerProperty<FavoriteHymnEntity>(
    _entities[0].properties[0],
  );

  /// See [FavoriteHymnEntity.hymnNumber].
  static final hymnNumber = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[1],
  );

  /// See [FavoriteHymnEntity.title].
  static final title = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[2],
  );

  /// See [FavoriteHymnEntity.lyrics].
  static final lyrics = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[3],
  );

  /// See [FavoriteHymnEntity.author].
  static final author = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[4],
  );

  /// See [FavoriteHymnEntity.composer].
  static final composer = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[5],
  );

  /// See [FavoriteHymnEntity.style].
  static final style = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[6],
  );

  /// See [FavoriteHymnEntity.sopranoFile].
  static final sopranoFile = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[7],
  );

  /// See [FavoriteHymnEntity.altoFile].
  static final altoFile = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[8],
  );

  /// See [FavoriteHymnEntity.tenorFile].
  static final tenorFile = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[9],
  );

  /// See [FavoriteHymnEntity.bassFile].
  static final bassFile = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[10],
  );

  /// See [FavoriteHymnEntity.countertenorFile].
  static final countertenorFile = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[11],
  );

  /// See [FavoriteHymnEntity.baritoneFile].
  static final baritoneFile = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[12],
  );

  /// See [FavoriteHymnEntity.midiFile].
  static final midiFile = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[13],
  );

  /// See [FavoriteHymnEntity.theme].
  static final theme = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[14],
  );

  /// See [FavoriteHymnEntity.subtheme].
  static final subtheme = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[15],
  );

  /// See [FavoriteHymnEntity.story].
  static final story = obx.QueryStringProperty<FavoriteHymnEntity>(
    _entities[0].properties[16],
  );

  /// See [FavoriteHymnEntity.dateAdded].
  static final dateAdded = obx.QueryDateProperty<FavoriteHymnEntity>(
    _entities[0].properties[17],
  );
}

/// [HymnEntity] entity fields to define ObjectBox queries.
class HymnEntity_ {
  /// See [HymnEntity.id].
  static final id = obx.QueryIntegerProperty<HymnEntity>(
    _entities[1].properties[0],
  );

  /// See [HymnEntity.number].
  static final number = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[1],
  );

  /// See [HymnEntity.title].
  static final title = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[2],
  );

  /// See [HymnEntity.lyrics].
  static final lyrics = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[3],
  );

  /// See [HymnEntity.author].
  static final author = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[4],
  );

  /// See [HymnEntity.composer].
  static final composer = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[5],
  );

  /// See [HymnEntity.style].
  static final style = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[6],
  );

  /// See [HymnEntity.sopranoFile].
  static final sopranoFile = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[7],
  );

  /// See [HymnEntity.altoFile].
  static final altoFile = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[8],
  );

  /// See [HymnEntity.tenorFile].
  static final tenorFile = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[9],
  );

  /// See [HymnEntity.bassFile].
  static final bassFile = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[10],
  );

  /// See [HymnEntity.countertenorFile].
  static final countertenorFile = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[11],
  );

  /// See [HymnEntity.baritoneFile].
  static final baritoneFile = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[12],
  );

  /// See [HymnEntity.midiFile].
  static final midiFile = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[13],
  );

  /// See [HymnEntity.theme].
  static final theme = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[14],
  );

  /// See [HymnEntity.subtheme].
  static final subtheme = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[15],
  );

  /// See [HymnEntity.story].
  static final story = obx.QueryStringProperty<HymnEntity>(
    _entities[1].properties[16],
  );
}

/// [RecentlyPlayedEntity] entity fields to define ObjectBox queries.
class RecentlyPlayedEntity_ {
  /// See [RecentlyPlayedEntity.id].
  static final id = obx.QueryIntegerProperty<RecentlyPlayedEntity>(
    _entities[2].properties[0],
  );

  /// See [RecentlyPlayedEntity.hymnNumber].
  static final hymnNumber = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[1],
  );

  /// See [RecentlyPlayedEntity.title].
  static final title = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[2],
  );

  /// See [RecentlyPlayedEntity.lyrics].
  static final lyrics = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[3],
  );

  /// See [RecentlyPlayedEntity.author].
  static final author = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[4],
  );

  /// See [RecentlyPlayedEntity.composer].
  static final composer = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[5],
  );

  /// See [RecentlyPlayedEntity.style].
  static final style = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[6],
  );

  /// See [RecentlyPlayedEntity.sopranoFile].
  static final sopranoFile = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[7],
  );

  /// See [RecentlyPlayedEntity.altoFile].
  static final altoFile = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[8],
  );

  /// See [RecentlyPlayedEntity.tenorFile].
  static final tenorFile = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[9],
  );

  /// See [RecentlyPlayedEntity.bassFile].
  static final bassFile = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[10],
  );

  /// See [RecentlyPlayedEntity.countertenorFile].
  static final countertenorFile = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[11],
  );

  /// See [RecentlyPlayedEntity.baritoneFile].
  static final baritoneFile = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[12],
  );

  /// See [RecentlyPlayedEntity.midiFile].
  static final midiFile = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[13],
  );

  /// See [RecentlyPlayedEntity.theme].
  static final theme = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[14],
  );

  /// See [RecentlyPlayedEntity.subtheme].
  static final subtheme = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[15],
  );

  /// See [RecentlyPlayedEntity.story].
  static final story = obx.QueryStringProperty<RecentlyPlayedEntity>(
    _entities[2].properties[16],
  );

  /// See [RecentlyPlayedEntity.lastPlayed].
  static final lastPlayed = obx.QueryDateProperty<RecentlyPlayedEntity>(
    _entities[2].properties[17],
  );
}

/// [SettingEntity] entity fields to define ObjectBox queries.
class SettingEntity_ {
  /// See [SettingEntity.id].
  static final id = obx.QueryIntegerProperty<SettingEntity>(
    _entities[3].properties[0],
  );

  /// See [SettingEntity.key].
  static final key = obx.QueryStringProperty<SettingEntity>(
    _entities[3].properties[1],
  );

  /// See [SettingEntity.value].
  static final value = obx.QueryStringProperty<SettingEntity>(
    _entities[3].properties[2],
  );
}
